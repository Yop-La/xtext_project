
import pandas as pd
mml_data = pd.read_csv("/home/ensai/Dropbox/ENSAI/Ressources/S5/dsl/projet/ensai-sid-mml/org.xtext.example.mml/mml_data/iris.csv", sep=",")
target_index = "Species"

if target_index.replace('-','').isdigit():
    target_index = int(target_index)
else:
    target_index = list(mml_data.columns).index(target_index)

target = mml_data.iloc[:,target_index]
predictors = mml_data.drop(mml_data.columns[target_index], axis=1)

from sklearn.linear_model import LogisticRegression


def train_model(X_train, y_train,C=1e5, solver='lbfgs', multi_class='multinomial'):
    model = LogisticRegression(C=C, solver=solver, multi_class=multi_class)
    model.fit(X_train, y_train)
    return(model)
    
def test_model(model, X_test):
    predictions = model.predict(X_test)
    return(list(predictions))
    

metrics = "RECALL+F1+PRECISION";
metrics = metrics.split("+")

from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score

def compute_metrics(y_prediction,y_test,metrics):
    
    metrics_performance = {};
    
    for metric in metrics:

        
        if "RECALL" == metric:        
            recall = recall_score(y_test, y_prediction, average='macro')     
            metrics_performance["RECALL"] = recall


        if "PRECISION" == metric:
            precision = precision_score(y_test, y_prediction, average='macro')     
            metrics_performance["PRECISION"] = precision

        if "F1" == metric:
            f1 = f1_score(y_test, y_prediction, average='macro')     
            metrics_performance["F1"] = f1

    return(metrics_performance)
test_size = 1 - 70 / 100

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=test_size,random_state=109)


model = train_model(X_train, y_train)

y_prediction = test_model(model, X_test)

metrics = compute_metrics(y_prediction,y_test,metrics)

path_metrics_python = "/home/ensai/Dropbox/ENSAI/Ressources/S5/dsl/projet/ensai-sid-mml/org.xtext.example.mml/mml_data/metrics_SCIKIT"

import json
json_metrics = json.dumps(metrics, ensure_ascii=False)

with open(path_metrics_python, "w") as text_file:
    text_file.write(json_metrics)
    
print(json_metrics)
